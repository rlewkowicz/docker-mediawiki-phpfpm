FROM alpine:edge

# persistent / runtime deps
ENV PHPIZE_DEPS \
    autoconf \
    file \
    g++ \
    gcc \
    libc-dev \
    make \
    pkgconf \
    re2c
RUN apk update
RUN apk update && apk add --no-cache --virtual .persistent-deps \
    ca-certificates \
    curl \
    tar \
    xz \
    python \
    autoconf \
    build-base \
    git \
    mysql \
    util-linux \
    libpng-dev \
    libjpeg-turbo-dev \
    diffutils \
    wget \
    icu-dev \
    openldap-dev \
    mini-sendmail \
    expat \
    freetype \
    fontconfig \
    glib \
    libpng \
    expat-dev \
    freetype-dev \
    fontconfig-dev \
    glib-dev \
    libpng-dev \
    ttf-freefont \
    tcl \
    tcl-dev \
    libtool \
    flex-dev \
    byacc \
    automake \
    autoconf \
    swig \
    guile \
    qt-dev \
    file \
    gtk-doc \
    bash \
    imagemagick
    
# ensure www-data user exists
RUN set -x \
  && addgroup -g 82 -S www-data \
  && adduser -u 82 -D -S -G www-data www-data
# 82 is the standard uid/gid for "www-data" in Alpine
# http://git.alpinelinux.org/cgit/aports/tree/main/apache2/apache2.pre-install?h=v3.3.2
# http://git.alpinelinux.org/cgit/aports/tree/main/lighttpd/lighttpd.pre-install?h=v3.3.2
# http://git.alpinelinux.org/cgit/aports/tree/main/nginx-initscripts/nginx-initscripts.pre-install?h=v3.3.2

ENV PHP_INI_DIR /usr/local/etc/php
RUN mkdir -p $PHP_INI_DIR/conf.d

##<autogenerated>##
##</autogenerated>##

# Apply stack smash protection to functions using local buffers and alloca()
# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)
# Enable optimization (-O2)
# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)
# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)
# https://github.com/docker-library/php/issues/272
ENV CFLAGS="-fstack-protector-strong -fpic -fpie -O2"
ENV CPPFLAGS="$CFLAGS"
ENV LDFLAGS="-Wl,-O1 -Wl,--hash-style=both"

ENV GPG_KEYS %%GPG_KEYS%%

ENV PHP_VERSION %%PHP_VERSION%%
ENV PHP_URL="%%PHP_URL%%" PHP_ASC_URL="%%PHP_ASC_URL%%"
ENV PHP_SHA256="%%PHP_SHA256%%" PHP_MD5="%%PHP_MD5%%"

RUN set -xe; \
  \
  apk add --no-cache --virtual .fetch-deps \
    gnupg \
    openssl \
  ; \
  \
  mkdir -p /usr/src; \
  cd /usr/src; \
  \
  wget -O php.tar.xz "$PHP_URL"; \
  \
  apk del .fetch-deps

COPY docker-php-source /usr/local/bin/

RUN set -xe \
  && apk add --no-cache --virtual .build-deps \
    $PHPIZE_DEPS \
    curl-dev \
    gnupg \
    libedit-dev \
    libxml2-dev \
    libressl-dev \
    sqlite-dev \
  \
  && docker-php-source extract \
  && cd /usr/src/php \
  && ./configure \
    --with-config-file-path="$PHP_INI_DIR" \
    --with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
    \
    --disable-cgi \
    \
# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)
    --enable-ftp \
# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)
    --enable-mbstring \
# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)
    --enable-mysqlnd \
    \
    --with-curl \
    --with-libedit \
    --with-openssl \
    --with-zlib \
    \
    $PHP_EXTRA_CONFIGURE_ARGS \
  && make -j "$(getconf _NPROCESSORS_ONLN)" \
  && make install \
  && { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \
  && make clean \
  && docker-php-source delete \
  \
  && runDeps="$( \
    scanelf --needed --nobanner --recursive /usr/local \
      | awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' \
      | sort -u \
      | xargs -r apk info --installed \
      | sort -u \
  )" \
  && apk add --no-cache --virtual .php-rundeps $runDeps 
  
COPY docker-php-ext-* /usr/local/bin/

#Install Composer for various mediawiki deps
RUN php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" && \
php composer-setup.php --install-dir=bin --filename=composer && \
php -r "unlink('composer-setup.php');"

#compile graphviz
RUN mv /usr/bin/yacc /usr/bin/byacc

RUN mkdir graphviz && cd graphviz && \
wget https://github.com/libgd/libgd/archive/gd-2.2.3.tar.gz && \
tar -xzf gd* && \
cd libgd-gd-2.2.3 && \
./bootstrap.sh && ./configure && make -j10 install && cd .. && \
wget https://www.cairographics.org/releases/pixman-0.34.0.tar.gz && \
tar -xzf pixman-0.34.0.tar.gz && cd pixman-0.34.0 && ./configure && make install -j10 && cd .. && \
wget https://www.cairographics.org/releases/cairo-1.12.10.tar.xz && \
tar -xf cairo-1.12.10.tar.xz && \
cd cairo-1.12.10 && CFLAGS='-ffat-lto-objects' ./configure && make -j10 install && cd .. && \
wget https://www.freedesktop.org/software/harfbuzz/release/harfbuzz-1.3.0.tar.bz2 && \
tar -xjf harfbuzz-1.3.0.tar.bz2 && cd harfbuzz-1.3.0 && ./configure && make -j10 install && cd .. && \
git clone git://git.gnome.org/pango && cd pango && ./autogen.sh && make -j10 install && cd .. && \
wget http://www.graphviz.org/pub/graphviz/stable/SOURCES/graphviz-2.38.0.tar.gz && \
tar -xzf graph* && \
cd graphviz-2.38.0 && \
./autogen.sh && ./configure --bindir=/usr/bin --enable-perl=no && make -j10 install && cd ../.. && rm -rf graphviz && \
apk del .build-deps

RUN apk add --no-cache --virtual .persistent-deps \
build-base \
util-linux

RUN git clone https://github.com/tideways/php-profiler-extension.git && cd php-profiler-extension && \
for i in `find . -type f`; do rename tideways xhprof $i; done && \
find . -type f -print0 | xargs -0 sed -i 's/tideways/xhprof/g' && \
phpize && ./configure && make install && cd .. && rm -rf php-profiler-extension ; exit 0

RUN echo '<?php phpinfo(); ?>' > /phpinfo.php

RUN python -m ensurepip && pip install Pygments

RUN apk add coreutils

##<autogenerated>##
CMD ["php", "-a"]
##</autogenerated>##
